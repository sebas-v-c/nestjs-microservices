// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'auth';

export interface UserCredentials {
  username: string;
  password: string;
}

export interface UserAccess {
  accessToken: string;
}

export interface Token {
  token: string;
}

export interface ValidUser {
  valid: boolean;
  userId: string;
  role: string;
}

export const AUTH_PACKAGE_NAME = 'auth';

export interface AuthServiceClient {
  login(request: UserCredentials): Observable<UserAccess>;

  validateToken(request: Token): Observable<ValidUser>;
}

export interface AuthServiceController {
  login(
    request: UserCredentials,
  ): Promise<UserAccess> | Observable<UserAccess> | UserAccess;

  validateToken(
    request: Token,
  ): Promise<ValidUser> | Observable<ValidUser> | ValidUser;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['login', 'validateToken'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const AUTH_SERVICE_NAME = 'AuthService';
